# 
# Copyright (C) 2015-2017 Georg Bartels <georg.bartels@cs.uni-bremen.de>
# 
# This file is part of giskard.
# # giskard is free software; you can redistribute it and/or # modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 

scope:
  # definition of some nice short-cuts
  - unit-x: {vector3: [1, 0, 0]}
  - unit-y: {vector3: [0, 1, 0]}
  - unit-z: {vector3: [0, 0, 1]}
  - identity-rot: {axis-angle: [unit-x, 0]} 
  - zero-vec: {vector3: [0, 0, 0]}
  
  # definition of input transforms 
  - mug-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-joint: mug_pos_x}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-joint: mug_pos_y}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-joint: mug_pos_z}]}]
        - frame: [{axis-angle: [unit-x, {input-joint: mug_rot_x}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-joint: mug_rot_y}]}, zero-vec]
        - frame: [{axis-angle: [unit-z, {input-joint: mug_rot_z}]}, zero-vec]
  - maker-frame:
      frame-mul:
        - frame: [identity-rot, {vector3: [{input-scalar: maker_pos_x}, 0, 0]}]
        - frame: [identity-rot, {vector3: [0, {input-scalar: maker_pos_y}, 0]}]
        - frame: [identity-rot, {vector3: [0, 0, {input-scalar: maker_pos_z}]}]
        - frame: [{axis-angle: [unit-x, {input-scalar: maker_rot_x}]}, zero-vec]
        - frame: [{axis-angle: [unit-y, {input-scalar: maker_rot_y}]}, zero-vec]
        - frame: [{axis-angle: [unit-z, {input-scalar: maker_rot_z}]}, zero-vec]

  # definition of features
  - mug-bottom: {origin-of: mug-frame}
  - mug-top: {transform-vector: [mug-frame, {vector3: [0, 0, 0.108]}]}
  - maker-top: {origin-of: maker-frame}

  # expressions used in constraints 
  - mug-above-maker: {double-sub: [{z-coord: mug-bottom}, {z-coord: maker-top}]}
  - mug-upright: {double-sub: [{z-coord: mug-top}, {z-coord: mug-bottom}]}

  # some constants
  - controllable-weight: 0.001 # mu * 1
  - constraint-weight: 10.001 # mu + 10

controllable-constraints:
  - controllable-constraint: [-0.3, 0.3, controllable-weight, mug_pos_x]
  - controllable-constraint: [-0.3, 0.3, controllable-weight, mug_pos_y]
  - controllable-constraint: [-0.3, 0.3, controllable-weight, mug_pos_z]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, mug_rot_x]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, mug_rot_y]
  - controllable-constraint: [-0.5, 0.5, controllable-weight, mug_rot_z]

soft-constraints: 
  - soft-constraint: 
      - {double-sub: [0.3, mug-above-maker]} # control law for lower boundary
      - {double-sub: [0.35, mug-above-maker]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - mug-above-maker # expression used for Jacobian calcuation
      - mug_above_maker # name of expression reported
#  - soft-constraint: 
#      - {double-sub: [0.1, mug-upright]} # control law for lower boundary
#      - {double-sub: [0.12, mug-upright]} # control law for upper boundary
#      - constraint-weight # weight of this constraint
#      - mug-upright # expression used for Jacobian calcuation
#      - mug_upright # name of expression reported

hard-constraints: [] # no hard constraints used in this motion
